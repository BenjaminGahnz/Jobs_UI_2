import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url'; 
import Database from 'better-sqlite3';



const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


const DB_PATH = path.join(__dirname, 'my_jobs.db'); 


const TABLE_NAME = 'jobs';

const OUTPUT_PATH = path.join(__dirname, 'mockJobs.ts');


function generateMockData() {
  let db;

  const parseLocation = (locationString) => {
    if (!locationString || typeof locationString !== 'string') {
      return { city: null, country: null };
    }
    const parts = locationString.split(',').map(part => part.trim());
    return {
      city: parts[0] || null,
      country: parts[1] || null,
    };
  };

  try {
    if (!fs.existsSync(DB_PATH)) {
      throw new Error(`Database file not found at: ${DB_PATH}\nPlease make sure the DB_PATH is correct in the script.`);
    }
    db = new Database(DB_PATH, { readonly: true });
    console.log('Successfully connected to the database.');

    const stmt = db.prepare(`SELECT id, title, description, url, company, location, source, date_scraped FROM ${TABLE_NAME}`);
    const rows = stmt.all();
    console.log(`Found ${rows.length} jobs in the '${TABLE_NAME}' table.`);

    const transformedData = rows.map(row => ({
      id: row.id,
      title: row.title,
      company: row.company,
      location: parseLocation(row.location),
      description: row.description,
      url: row.url,
      source: row.source,
      date_scraped: row.date_scraped ? new Date(row.date_scraped).toISOString() : null,
    }));

    console.log('Successfully transformed the data.');

    const fileContent = `// This file is auto-generated by a script. Do not edit manually.
import type { JobListing } from './types';

export const mockJobs: JobListing[] = ${JSON.stringify(transformedData, null, 2)};
`;

    fs.writeFileSync(OUTPUT_PATH, fileContent, 'utf8');
    console.log(`✅ Successfully wrote mock data to ${OUTPUT_PATH}`);

  } catch (error) {
    console.error('❌ An error occurred:', error.message);
  } finally {
    if (db) {
      db.close();
      console.log('Database connection closed.');
    }
  }
}

generateMockData();